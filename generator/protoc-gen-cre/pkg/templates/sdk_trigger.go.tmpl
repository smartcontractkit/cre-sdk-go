{{define "trigger_method"}}
    {{ if .Method.Comments.Leading.String }}//{{.GoName}}Capability {{CleanComments .Method.Comments.Leading.String}} {{ end }}
func {{.Method.GoName}}({{ range Labels .Service -}}{{LowerFirst .Name}} {{.Type}},{{- end -}}config *{{name .InputType .GoPackageName}}) sdk.{{.Mode}}Trigger[*{{name .OutputType .GoPackageName}}, *{{name .OutputType .GoPackageName}}] { {{- if .Comments.Trailing.String }}//{{.GoName}}Capability {{CleanComments .Comments.Trailing.String}} {{ end }}
    configAny, _ := anypb.New(config)
    return &{{.Service.GoName | LowerFirst}}{{.Method.GoName}} {
        {{ range Labels .Service -}}
            {{.Name }}: {{LowerFirst .Name }},
        {{ end }}
        config: configAny,
    }
}

type {{.Service.GoName | LowerFirst}}{{.Method.GoName}} struct {
    config *anypb.Any
    {{ range Labels .Service -}}
        {{.Name }} {{.Type}}
    {{ end -}}
}

func (*{{.Service.GoName | LowerFirst}}{{.Method.GoName}}) Is{{.Mode}}Trigger() {}

func (*{{.Service.GoName | LowerFirst}}{{.Method.GoName}}) NewT() *{{name .OutputType .GoPackageName}} {
    return &{{name .OutputType .GoPackageName}}{}
}

func (c *{{.Service.GoName | LowerFirst}}{{.Method.GoName}}) CapabilityID() string {
    return {{FullCapabilityId .Service}}
}

func (*{{.Service.GoName | LowerFirst}}{{.Method.GoName}}) Method() string {
    return "{{.Method.GoName}}"
}

func (t *{{.Service.GoName | LowerFirst}}{{.Method.GoName}}) ConfigAsAny() *anypb.Any {
    return t.config
}

func (t *{{.Service.GoName | LowerFirst}}{{.Method.GoName}}) Adapt(trigger *{{name .OutputType .GoPackageName}}) (*{{name .OutputType .GoPackageName}}, error) {
    return trigger, nil
}
{{end}}
