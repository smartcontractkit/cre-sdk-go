{{- $anyServiceHasActions := false -}}
{{- range .Services -}}
    {{- range .Methods -}}
      {{- if not (isTrigger .) -}}
        {{- $anyServiceHasActions = true -}}
      {{- end -}}
    {{- end -}}
{{- end -}}
{{- if $anyServiceHasActions -}}

package {{.GoPackageName}}mock

import (
    "context"
    "fmt"
    "testing"

    "google.golang.org/protobuf/types/known/anypb"
    {{ range .Services }}
        {{ range .Methods }}
            {{ if not (isTrigger .) }}
                {{ addImport .Input.GoIdent.GoImportPath "" }}
                {{ addImport .Output.GoIdent.GoImportPath "" }}
            {{ end }}
        {{ end }}
    {{ end }}
    {{ range allimports }}
    {{.}}
    {{ end }}

    sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
    "github.com/smartcontractkit/cre-sdk-go/sdk/testutils/registry"
)

// avoid unused imports
var _ = registry.Registry{}
    {{ range .Services -}}
        {{ $service := . -}}
        {{- $hasActions := false -}}
        {{- range .Methods -}}
        {{- if not (isTrigger .) -}}
            {{- $hasActions = true -}}
          {{- end -}}
        {{- end -}}
        {{- if $hasActions }}
{{ if .Comments.Leading.String }}//{{.GoName}}Capability {{CleanComments .Comments.Leading.String}} {{ end }}
func New{{.GoName}}Capability({{ range Labels . -}}{{.Name}} {{.Type}},{{- end -}}t testing.TB) (*{{.GoName}}Capability, error) { {{- if .Comments.Trailing.String }}//{{.GoName}}Capability {{CleanComments .Comments.Trailing.String}} {{ end }}
    c := &{{.GoName}}Capability{
        {{ range Labels . -}}
        {{.Name }}: {{.Name }},
        {{ end }}
    }
    reg := registry.GetRegistry(t)
    err := reg.RegisterCapability(c)
    return c, err
}

{{ if .Comments.Leading.String }}//{{.GoName}}Capability {{CleanComments .Comments.Leading.String}} {{ end }}
type {{.GoName}}Capability struct { {{- if .Comments.Trailing.String }}//{{.GoName}}Capability {{CleanComments .Comments.Trailing.String}} {{ end }}
        {{ range Labels . -}}
            {{.Name }} {{.Type}}
        {{ end -}}
        {{- range .Methods -}}
            {{- if not (isTrigger .) -}}
    // TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
    {{ if .Comments.Leading.String }}//{{.GoName}}Capability {{CleanComments .Comments.Leading.String}} {{ end }}
    {{.GoName}} func(ctx context.Context, input *{{ImportAlias .Input.GoIdent.GoImportPath}}.{{.Input.GoIdent.GoName}}) (*{{ImportAlias .Output.GoIdent.GoImportPath}}.{{.Output.GoIdent.GoName}}, error) {{- if .Comments.Trailing.String }}//{{.GoName}}Capability {{CleanComments .Comments.Trailing.String}} {{ end }}
            {{ end -}}
       {{ end -}}
}

func (c *{{.GoName}}Capability) Invoke(ctx context.Context, request *sdkpb.CapabilityRequest) *sdkpb.CapabilityResponse {
    capResp := &sdkpb.CapabilityResponse{}
    switch request.Method {
        {{- range .Methods }}
            {{- if not (isTrigger .) }}
    case "{{.GoName}}":
        input := &{{ImportAlias .Input.GoIdent.GoImportPath}}.{{.Input.GoIdent.GoName}}{}
        if err := request.Payload.UnmarshalTo(input); err != nil {
            capResp.Response = &sdkpb.CapabilityResponse_Error{Error: err.Error()}
            break
        }

        if c.{{.GoName}} == nil {
            capResp.Response = &sdkpb.CapabilityResponse_Error{Error: "no stub provided for {{.GoName}}"}
            break
        }
        resp, err := c.{{.GoName}}(ctx, input)
        if err != nil {
            capResp.Response = &sdkpb.CapabilityResponse_Error{Error: err.Error()}
        } else {
            payload, err := anypb.New(resp)
            if err == nil {
                capResp.Response = &sdkpb.CapabilityResponse_Payload{Payload: payload}
            } else {
                capResp.Response = &sdkpb.CapabilityResponse_Error{Error: err.Error()}
            }
        }
            {{- end }}
        {{- end }}
    default:
        capResp.Response = &sdkpb.CapabilityResponse_Error{Error: fmt.Sprintf("method %s not found", request.Method)}
    }

    return capResp
}

func (c *{{.GoName}}Capability) ID() string {
    return {{FullCapabilityId .}}
}

        {{- end -}}
    {{- end -}}
{{- end -}}