// Code generated by github.com/smartcontractkit/cre-sdk-go/generator/protoc-gen-cre, DO NOT EDIT.

package actionandtriggermock

import (
	"context"
	"fmt"
	"testing"

	"google.golang.org/protobuf/types/known/anypb"

	"github.com/smartcontractkit/cre-sdk-go/internal_testing/capabilities/actionandtrigger"

	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	"github.com/smartcontractkit/cre-sdk-go/cre/testutils/registry"
)

// avoid unused imports
var _ = registry.Registry{}

func NewBasicCapability(t testing.TB) (*BasicCapability, error) {
	c := &BasicCapability{}
	reg := registry.GetRegistry(t)
	err := reg.RegisterCapability(c)
	return c, err
}

type BasicCapability struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call

	Action func(ctx context.Context, input *actionandtrigger.Input) (*actionandtrigger.Output, error)
}

func (c *BasicCapability) Invoke(ctx context.Context, request *sdkpb.CapabilityRequest) *sdkpb.CapabilityResponse {
	capResp := &sdkpb.CapabilityResponse{}
	switch request.Method {
	case "Action":
		input := &actionandtrigger.Input{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &sdkpb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if c.Action == nil {
			capResp.Response = &sdkpb.CapabilityResponse_Error{Error: "no stub provided for Action"}
			break
		}
		resp, err := c.Action(ctx, input)
		if err != nil {
			capResp.Response = &sdkpb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &sdkpb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &sdkpb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	default:
		capResp.Response = &sdkpb.CapabilityResponse_Error{Error: fmt.Sprintf("method %s not found", request.Method)}
	}

	return capResp
}

func (c *BasicCapability) ID() string {
	return "basic-test-action-trigger@1.0.0"
}
