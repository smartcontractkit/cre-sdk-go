// Code generated by github.com/smartcontractkit/cre-sdk-go/generator/protoc-gen-cre, DO NOT EDIT.

package consensus

import (
	"errors"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/anypb"

	"github.com/smartcontractkit/chainlink-common/pkg/values/pb"
	pb2 "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	"github.com/smartcontractkit/cre-sdk-go/cre"
)

type Consensus struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
}

func (c *Consensus) Simple(runtime cre.Runtime, input *pb2.SimpleConsensusInputs) cre.Promise[*pb.Value] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return cre.PromiseFromResult[*pb.Value](nil, err)
	}

	capCallResponse := cre.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "consensus@1.0.0-alpha",
		Payload: wrapped,
		Method:  "Simple",
	}), func(i *sdkpb.CapabilityResponse) (*pb.Value, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &pb.Value{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})

	return capCallResponse

}

func (c *Consensus) Report(runtime cre.Runtime, input *pb2.ReportRequest) cre.Promise[*cre.Report] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return cre.PromiseFromResult[*cre.Report](nil, err)
	}

	capCallResponse := cre.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "consensus@1.0.0-alpha",
		Payload: wrapped,
		Method:  "Report",
	}), func(i *sdkpb.CapabilityResponse) (*pb2.ReportResponse, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &pb2.ReportResponse{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
	return cre.Then(capCallResponse, cre.X_GeneratedCodeOnly_WrapReport)

}
