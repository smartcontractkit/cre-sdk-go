// Code generated by github.com/smartcontractkit/cre-sdk-go/generator/protoc-gen-cre, DO NOT EDIT.

package http

import (
	"errors"
	"log/slog"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/anypb"

	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	"github.com/smartcontractkit/cre-sdk-go/cre"
)

type Client struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
}

type SendRequester struct {
	client      *Client
	nodeRuntime cre.NodeRuntime
}

func (c *SendRequester) SendRequest(input *Request) cre.Promise[*Response] {
	return c.client.SendRequest(c.nodeRuntime, input)
}

// SendRequest Allows usage of `SendRequester` with Byzantine fault tolerance.
func SendRequest[C, T any](
	config C,
	runtime cre.Runtime,
	client *Client,
	fn func(config C, logger *slog.Logger, sendRequester *SendRequester) (T, error),
	ca cre.ConsensusAggregation[T]) cre.Promise[T] {
	wrapped := func(config C, nodeRuntime cre.NodeRuntime) (T, error) {
		sendRequester := SendRequester{client: client, nodeRuntime: nodeRuntime}
		return fn(config, runtime.Logger(), &sendRequester)
	}

	return cre.RunInNodeMode(config, runtime, wrapped, ca)
}

func (c *Client) SendRequest(runtime cre.NodeRuntime, input *Request) cre.Promise[*Response] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return cre.PromiseFromResult[*Response](nil, err)
	}

	capCallResponse := cre.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "http-actions@1.0.0-alpha",
		Payload: wrapped,
		Method:  "SendRequest",
	}), func(i *sdkpb.CapabilityResponse) (*Response, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &Response{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})

	return capCallResponse

}
