// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package evm

import (
	"errors"
	"strconv"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/anypb"

	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	"github.com/smartcontractkit/cre-sdk-go/sdk"
	"google.golang.org/protobuf/types/known/emptypb"
)

type Client struct {
	ChainSelector uint64
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
}

func (c *Client) CallContract(runtime sdk.Runtime, input *CallContractRequest) sdk.Promise[*CallContractReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*CallContractReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "CallContract",
	}), func(i *sdkpb.CapabilityResponse) (*CallContractReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &CallContractReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) FilterLogs(runtime sdk.Runtime, input *FilterLogsRequest) sdk.Promise[*FilterLogsReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*FilterLogsReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "FilterLogs",
	}), func(i *sdkpb.CapabilityResponse) (*FilterLogsReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &FilterLogsReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) BalanceAt(runtime sdk.Runtime, input *BalanceAtRequest) sdk.Promise[*BalanceAtReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*BalanceAtReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "BalanceAt",
	}), func(i *sdkpb.CapabilityResponse) (*BalanceAtReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &BalanceAtReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) EstimateGas(runtime sdk.Runtime, input *EstimateGasRequest) sdk.Promise[*EstimateGasReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*EstimateGasReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "EstimateGas",
	}), func(i *sdkpb.CapabilityResponse) (*EstimateGasReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &EstimateGasReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) GetTransactionByHash(runtime sdk.Runtime, input *GetTransactionByHashRequest) sdk.Promise[*GetTransactionByHashReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*GetTransactionByHashReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionByHash",
	}), func(i *sdkpb.CapabilityResponse) (*GetTransactionByHashReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &GetTransactionByHashReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) GetTransactionReceipt(runtime sdk.Runtime, input *GetTransactionReceiptRequest) sdk.Promise[*GetTransactionReceiptReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*GetTransactionReceiptReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionReceipt",
	}), func(i *sdkpb.CapabilityResponse) (*GetTransactionReceiptReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &GetTransactionReceiptReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) HeaderByNumber(runtime sdk.Runtime, input *HeaderByNumberRequest) sdk.Promise[*HeaderByNumberReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*HeaderByNumberReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "HeaderByNumber",
	}), func(i *sdkpb.CapabilityResponse) (*HeaderByNumberReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &HeaderByNumberReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) RegisterLogTracking(runtime sdk.Runtime, input *RegisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "RegisterLogTracking",
	}), func(i *sdkpb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) UnregisterLogTracking(runtime sdk.Runtime, input *UnregisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "UnregisterLogTracking",
	}), func(i *sdkpb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func LogTrigger(chainSelector uint64, config *FilterLogTriggerRequest) sdk.Trigger[*Log, *Log] {
	configAny := &anypb.Any{}
	_ = anypb.MarshalFrom(configAny, config, proto.MarshalOptions{Deterministic: true})
	return &clientLogTrigger{
		ChainSelector: chainSelector,

		config: configAny,
	}
}

type clientLogTrigger struct {
	config        *anypb.Any
	ChainSelector uint64
}

func (*clientLogTrigger) IsTrigger() {}

func (*clientLogTrigger) NewT() *Log {
	return &Log{}
}

func (c *clientLogTrigger) CapabilityID() string {
	return "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0"
}

func (*clientLogTrigger) Method() string {
	return "LogTrigger"
}

func (t *clientLogTrigger) ConfigAsAny() *anypb.Any {
	return t.config
}

func (t *clientLogTrigger) Adapt(trigger *Log) (*Log, error) {
	return trigger, nil
}

func (c *Client) WriteReport(runtime sdk.Runtime, input *WriteReportRequest) sdk.Promise[*WriteReportReply] {
	wrapped := &anypb.Any{}
	err := anypb.MarshalFrom(wrapped, input, proto.MarshalOptions{Deterministic: true})
	if err != nil {
		return sdk.PromiseFromResult[*WriteReportReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "evm" + ":ChainSelector:" + strconv.FormatUint(c.ChainSelector, 10) + "@1.0.0",
		Payload: wrapped,
		Method:  "WriteReport",
	}), func(i *sdkpb.CapabilityResponse) (*WriteReportReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &WriteReportReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

const AvalancheMainnet = 6433500567565415381

const AvalancheTestnetFuji = 14767482510784806043

const BinanceSmartChainMainnetOpbnb1 = 465944652040885897

const BinanceSmartChainTestnetOpbnb1 = 13274425992935471758

const EthereumMainnet = 5009297550715157269

const EthereumMainnetArbitrum1 = 4949039107694359620

const EthereumMainnetOptimism1 = 3734403246176062136

const EthereumTestnetSepolia = 16015286601757825753

const EthereumTestnetSepoliaArbitrum1 = 3478487238524512106

const EthereumTestnetSepoliaBase1 = 10344971235874465080

const EthereumTestnetSepoliaOptimism1 = 5224473277236331295

const PolygonMainnet = 4051577828743386545

const PolygonTestnetAmoy = 16281711391670634445
